/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LoanAllocationService } from "../loanAllocation.service";
import { LoanAllocationCreateInput } from "./LoanAllocationCreateInput";
import { LoanAllocation } from "./LoanAllocation";
import { LoanAllocationFindManyArgs } from "./LoanAllocationFindManyArgs";
import { LoanAllocationWhereUniqueInput } from "./LoanAllocationWhereUniqueInput";
import { LoanAllocationUpdateInput } from "./LoanAllocationUpdateInput";

export class LoanAllocationControllerBase {
  constructor(protected readonly service: LoanAllocationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LoanAllocation })
  async createLoanAllocation(
    @common.Body() data: LoanAllocationCreateInput
  ): Promise<LoanAllocation> {
    return await this.service.createLoanAllocation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LoanAllocation] })
  @ApiNestedQuery(LoanAllocationFindManyArgs)
  async loanAllocations(
    @common.Req() request: Request
  ): Promise<LoanAllocation[]> {
    const args = plainToClass(LoanAllocationFindManyArgs, request.query);
    return this.service.loanAllocations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LoanAllocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async loanAllocation(
    @common.Param() params: LoanAllocationWhereUniqueInput
  ): Promise<LoanAllocation | null> {
    const result = await this.service.loanAllocation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LoanAllocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLoanAllocation(
    @common.Param() params: LoanAllocationWhereUniqueInput,
    @common.Body() data: LoanAllocationUpdateInput
  ): Promise<LoanAllocation | null> {
    try {
      return await this.service.updateLoanAllocation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LoanAllocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLoanAllocation(
    @common.Param() params: LoanAllocationWhereUniqueInput
  ): Promise<LoanAllocation | null> {
    try {
      return await this.service.deleteLoanAllocation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
