/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LoanAllocation as PrismaLoanAllocation } from "@prisma/client";

export class LoanAllocationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LoanAllocationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.loanAllocation.count(args);
  }

  async loanAllocations<T extends Prisma.LoanAllocationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoanAllocationFindManyArgs>
  ): Promise<PrismaLoanAllocation[]> {
    return this.prisma.loanAllocation.findMany<Prisma.LoanAllocationFindManyArgs>(
      args
    );
  }
  async loanAllocation<T extends Prisma.LoanAllocationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoanAllocationFindUniqueArgs>
  ): Promise<PrismaLoanAllocation | null> {
    return this.prisma.loanAllocation.findUnique(args);
  }
  async createLoanAllocation<T extends Prisma.LoanAllocationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoanAllocationCreateArgs>
  ): Promise<PrismaLoanAllocation> {
    return this.prisma.loanAllocation.create<T>(args);
  }
  async updateLoanAllocation<T extends Prisma.LoanAllocationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoanAllocationUpdateArgs>
  ): Promise<PrismaLoanAllocation> {
    return this.prisma.loanAllocation.update<T>(args);
  }
  async deleteLoanAllocation<T extends Prisma.LoanAllocationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoanAllocationDeleteArgs>
  ): Promise<PrismaLoanAllocation> {
    return this.prisma.loanAllocation.delete(args);
  }
}
